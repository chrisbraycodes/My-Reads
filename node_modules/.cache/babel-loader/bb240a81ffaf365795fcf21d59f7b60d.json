{"ast":null,"code":"var _jsxFileName = \"/Users/GoodDogAm/Desktop/nd0191-c1-myreads-main/starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\"; // Import API functions\n\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport MainPage from \"./MainPage\";\nimport SearchPage from \"./SearchPage\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [books, setBooks] = useState([]); // State to store fetched books\n  // Fetch books when the component mounts\n\n  useEffect(() => {\n    const fetchBooks = async () => {\n      const fetchedBooks = await BooksAPI.getAll(); // Fetch books from the API\n\n      setBooks(fetchedBooks); // Store them in state\n    };\n\n    fetchBooks(); // Call the function to fetch books\n  }, []); // Empty dependency array to call this only on mount\n  // Handle updating a book's shelf\n\n  const updateBookShelf = (book, newShelf) => {\n    BooksAPI.update(book, newShelf).then(() => {\n      // Update the book's shelf locally after API call succeeds\n      setBooks(prevBooks => prevBooks.map(b => b.id === book.id ? { ...b,\n        shelf: newShelf\n      } : b));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(MainPage, {\n          books: books,\n          updateBookShelf: updateBookShelf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/search\",\n        element: /*#__PURE__*/_jsxDEV(SearchPage, {\n          updateBookShelf: updateBookShelf,\n          currentBooks: books\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ww1JAI05mMsgubm5EIyBKqdj5S0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/GoodDogAm/Desktop/nd0191-c1-myreads-main/starter/src/App.js"],"names":["useEffect","useState","BooksAPI","BrowserRouter","Router","Route","Routes","MainPage","SearchPage","App","books","setBooks","fetchBooks","fetchedBooks","getAll","updateBookShelf","book","newShelf","update","then","prevBooks","map","b","id","shelf"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B,C,CAAwC;;AACxC,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC,CADa,CAC2B;AAExC;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAG,YAAY;AAC7B,YAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,MAAT,EAA3B,CAD6B,CACiB;;AAC9CH,MAAAA,QAAQ,CAACE,YAAD,CAAR,CAF6B,CAEL;AACzB,KAHD;;AAKAD,IAAAA,UAAU,GANI,CAMA;AACf,GAPQ,EAON,EAPM,CAAT,CAJa,CAWL;AAER;;AACA,QAAMG,eAAe,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC1Cf,IAAAA,QAAQ,CAACgB,MAAT,CAAgBF,IAAhB,EAAsBC,QAAtB,EAAgCE,IAAhC,CAAqC,MAAM;AACzC;AACAR,MAAAA,QAAQ,CAAES,SAAD,IACPA,SAAS,CAACC,GAAV,CAAeC,CAAD,IACZA,CAAC,CAACC,EAAF,KAASP,IAAI,CAACO,EAAd,GAAmB,EAAE,GAAGD,CAAL;AAAQE,QAAAA,KAAK,EAAEP;AAAf,OAAnB,GAA+CK,CADjD,CADM,CAAR;AAKD,KAPD;AAQD,GATD;;AAWA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,GADP;AAEE,QAAA,OAAO,eAAE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEZ,KAAjB;AAAwB,UAAA,eAAe,EAAEK;AAAzC;AAAA;AAAA;AAAA;AAAA;AAFX;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,OAAO,eACL,QAAC,UAAD;AAAY,UAAA,eAAe,EAAEA,eAA7B;AAA8C,UAAA,YAAY,EAAEL;AAA5D;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAzCQD,G;;KAAAA,G;AA2CT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\"; // Import API functions\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport MainPage from \"./MainPage\";\nimport SearchPage from \"./SearchPage\";\nimport './App.css';\n\nfunction App() {\n  const [books, setBooks] = useState([]); // State to store fetched books\n\n  // Fetch books when the component mounts\n  useEffect(() => {\n    const fetchBooks = async () => {\n      const fetchedBooks = await BooksAPI.getAll(); // Fetch books from the API\n      setBooks(fetchedBooks); // Store them in state\n    };\n\n    fetchBooks(); // Call the function to fetch books\n  }, []); // Empty dependency array to call this only on mount\n\n  // Handle updating a book's shelf\n  const updateBookShelf = (book, newShelf) => {\n    BooksAPI.update(book, newShelf).then(() => {\n      // Update the book's shelf locally after API call succeeds\n      setBooks((prevBooks) =>\n        prevBooks.map((b) =>\n          b.id === book.id ? { ...b, shelf: newShelf } : b\n        )\n      );\n    });\n  };\n\n  return (\n    <Router>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={<MainPage books={books} updateBookShelf={updateBookShelf} />}\n        />\n        <Route\n          path=\"/search\"\n          element={\n            <SearchPage updateBookShelf={updateBookShelf} currentBooks={books} />\n          }\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}